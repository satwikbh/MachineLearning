import yara
import urllib

from pymongo import MongoClient
from sshtunnel import SSHTunnelForwarder

from Utils.LoggerUtil import LoggerUtil
from Utils.DBUtils import DBUtils
from Utils.ConfigUtil import ConfigUtil


class CreateYaraRules:
    def __init__(self):
        self.log = LoggerUtil(self.__class__.__name__).get()
        self.db_utils = DBUtils()
        self.config = ConfigUtil.get_config_instance()

    def get_collection(self):
        username = self.config['environment']['mongo']['username']
        pwd = self.config['environment']['mongo']['password']
        password = urllib.quote(pwd)
        address = self.config['environment']['mongo']['address']
        port = self.config['environment']['mongo']['port']
        auth_db = self.config['environment']['mongo']['auth_db']
        is_auth_enabled = self.config['environment']['mongo']['is_auth_enabled']

        server = SSHTunnelForwarder("10.2.40.13", ssh_username="satwik", ssh_password="aith0561",
                                    remote_bind_address=('127.0.0.1', 27017))
        server.start()
        remote_client = MongoClient('127.0.0.1', server.local_bind_port)

        local_client = self.db_utils.get_client(address=address, port=port, auth_db=auth_db,
                                                is_auth_enabled=is_auth_enabled,
                                                username=username, password=password)

        signatures_db_name = self.config['environment']['mongo']['signatures']
        signatures_db = remote_client[signatures_db_name]

        clusters_db_name = self.config['environment']['mongo']['clusters_db_name']
        clusters_db = remote_client[clusters_db_name]

        return remote_client, local_client, clusters_db, signatures_db

    def core_logic(self, goodware_features, cluster_collection):
        """
        This takes a cluster (which is a collection in the clusters_db) and build yara signature for the collection.
        The logic is to get the top frequent features, prune them using good_ware signatures and then out of the
        resultant features generate a yara signature.
        :return:
        """
        self.log.info("Creating signature for the cluster : {}".format(cluster_collection))
        signature = []
        return signature

    def store_signature(self, signatures_db, collection_name, signature):
        """
        Takes the signature and stores it in the signature_db with the same name as the clusters collection.
        :param signatures_db:
        :param collection_name:
        :param signature:
        :return:
        """
        try:
            if collection_name not in signatures_db.collection_names():
                signatures_db.create_collection(collection_name)
            collection = signatures_db[collection_name]
            collection.insert(signature)
        except Exception as e:
            self.log.error("Error : {}".format(e))

    def main(self):
        remote_client, local_client, clusters_db, signatures_db = self.get_collection()
        goodware_features = []
        for collection_name in clusters_db.collection_names():
            cluster_collection = clusters_db[collection_name]
            signature = self.core_logic(goodware_features=goodware_features, cluster_collection=cluster_collection)
            self.store_signature(signatures_db, collection_name, signature)

        remote_client.close()
        local_client.close()


if __name__ == '__main__':
    yara_rules = CreateYaraRules()
    yara_rules.main()
