import yara
import json
import datetime

from Utils.LoggerUtil import LoggerUtil
from Utils.DBUtils import DBUtils
from Utils.ConfigUtil import ConfigUtil
from PrepareData.ParsingLogic import ParsingLogic
from HelperFunctions.HelperFunction import HelperFunction


class CreateYaraRules:
    def __init__(self):
        self.log = LoggerUtil(self.__class__.__name__).get()
        self.db_utils = DBUtils()
        self.config = ConfigUtil.get_config_instance()
        self.parser = ParsingLogic()
        self.helper = HelperFunction()

    @staticmethod
    def get_template(rule_name, author, description, string_values_list):
        """
        Takes the params and generates the template for the yara rule.
        See yara docs for more info on how to write and compile yara rules.
        :param rule_name:
        :param author:
        :param description:
        :param string_values_list:
        :return:
        """
        identifiers = ['fullword', 'wide', 'ascii']
        strings = ""
        conditions = ['all of them']
        for index, string_value in enumerate(string_values_list):
            if '\\' in string_value or '(' in string_value or ')' in string_value or '{' in string_value or '}' in string_value:
                tmp = str(string_value).encode('string_escape')
                strings += "$s" + str(index) + " = " + ' \"' + tmp + '\"' + " " + identifiers[0] + " " + \
                           identifiers[2] + "\n"
            else:
                strings += "$s" + str(index) + " = " + ' \"' + string_value + '\"' + " " + identifiers[0] + "\n"

        rule = "rule " + rule_name + " {" + "\n" + \
               "meta:" + "\n" + \
               "description = " + '\"' + description + '\"' + "\n" + \
               "author = " + '\"' + author + '\"' + "\n" + \
               "time = " + '\"' + str(datetime.datetime.now()) + '\"' + "\n" + \
               "strings: " + "\n" + strings + "\n" + \
               "condition:" + "\n" + conditions[0] + "\n" + \
               "}"

        return rule

    def gen_yara_sig(self, top_k_values, cluster_name):
        """
        Takes the frequent features for the family with cluster_name and return the compiled yara rule.
        :param top_k_values:
        :param cluster_name:
        :return:
        """
        try:
            author = self.config['yara']['author']
            description = 'Auto-generated rule for family : ' + cluster_name
            signature = self.get_template(rule_name=cluster_name,
                                          author=author,
                                          description=description,
                                          string_values_list=top_k_values)
            rule_path = self.config['yara']['rule_path'] + cluster_name + ".yara"
            f = open(rule_path, 'w')
            print >> f, signature
            f.close()
            # If there is a error below then it is not a proper yara rule.
            yara.compile(filepath=rule_path)
            return signature
        except Exception as e:
            self.log.error("Error : {}".format(e))

    def store_signature(self, signatures_db, collection_name, signature):
        """
        Takes the signature and stores it in the signature_db with the same name as the clusters collection.
        :param signatures_db:
        :param collection_name:
        :param signature:
        :return:
        """
        try:
            if collection_name not in signatures_db.collection_names():
                signatures_db.create_collection(collection_name)
            collection = signatures_db[collection_name]
            signature_json = json.dumps(signature)
            doc = dict()
            doc['cluster_name'] = collection_name
            doc['signature'] = signature_json
            collection.insert_one(doc)
        except Exception as e:
            self.log.error("Error : {}".format(e))
