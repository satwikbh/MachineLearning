import json
from collections import defaultdict
from urllib.parse import quote

from PrepareData.ParsingLogic import ParsingLogic
from Utils.ConfigUtil import ConfigUtil
from Utils.DBUtils import DBUtils
from Utils.LoggerUtil import LoggerUtil


class RetrievePhyloResults:
    def __init__(self):
        self.log = LoggerUtil(self.__class__.__name__).get()
        self.config = ConfigUtil.get_config_instance()
        self.db_utils = DBUtils()
        self.parser = ParsingLogic(use_trie_pruning=True)

    def get_collection(self):
        username = self.config['environment']['mongo']['username']
        pwd = self.config['environment']['mongo']['password']
        password = quote(pwd)
        address = self.config['environment']['mongo']['address']
        port = self.config['environment']['mongo']['port']
        auth_db = self.config['environment']['mongo']['auth_db']
        is_auth_enabled = self.config['environment']['mongo']['is_auth_enabled']

        client = self.db_utils.get_client(address=address, port=port, auth_db=auth_db,
                                          is_auth_enabled=is_auth_enabled,
                                          username=username, password=password)
        db_name = self.config['environment']['mongo']['db_name']
        cuckoo_db = client[db_name]

        c2db_collection_name = self.config['environment']['mongo']['c2db_collection_name']
        phylogeny_collection_name = self.config['environment']['mongo']['phylogeny_collection']

        c2db_collection = cuckoo_db[c2db_collection_name]
        phylogeny_collection = cuckoo_db[phylogeny_collection_name]

        return c2db_collection, phylogeny_collection

    def temp(self, c2db_collection, vs_key, sisters_list, children_list):
        meta_dict = dict()
        common_dict = defaultdict(list)

        doc2bow_vs_key = self.parser.parse_list_of_documents(collection=c2db_collection, list_of_docs=[vs_key])
        vs_key_features = set(doc2bow_vs_key.values())

        doc2bow_sisters = self.parser.parse_list_of_documents(collection=c2db_collection, list_of_docs=sisters_list)
        for key, features in doc2bow_sisters.items():
            temp = set.intersection(vs_key_features, set(features))
            common_dict[key] += list(temp)

        doc2bow_children = self.parser.parse_list_of_documents(collection=c2db_collection, list_of_docs=children_list)
        for key, features in doc2bow_children.items():
            temp = set.intersection(vs_key_features, set(features))
            common_dict[key] += list(temp)

        meta_dict[vs_key] = common_dict
        return meta_dict

    def core_logic(self, vs_key, c2db_collection, phylogeny_collection):
        phylo_cursor = phylogeny_collection.find({"vs_md5": vs_key})
        sisters_list, children_list = list(), list()
        for phylo_doc in phylo_cursor:
            sisters_list += phylo_doc["sisters"]
            children_list += phylo_doc["children"]

        meta_dict = self.temp(c2db_collection, vs_key, sisters_list, children_list)

    def main(self, family_name, vs_key):
        c2db_collection, phylogeny_collection = self.get_collection()
        labels_path = self.config["data"]["labels_path"]
        fam_lok = json.load(open(labels_path + "/" + "family_to_key_list_mapping.json"))

        for name, lok in fam_lok.items():
            if name == family_name:
                if vs_key in lok:
                    self.core_logic(vs_key, c2db_collection, phylogeny_collection)
                else:
                    self.log.error("Given instance : {} doesn't belong to family : {}".format(vs_key, family_name))


if __name__ == '__main__':
    retrieve = RetrievePhyloResults()
    retrieve.main(family_name="")
